// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(26)
            {
                { typeof(global::Shared.Network.PublicUserData[]), 0 },
                { typeof(global::Shared.Network.AuthType), 1 },
                { typeof(global::Shared.Network.AccessToken), 2 },
                { typeof(global::Shared.Network.AuthenticationData), 3 },
                { typeof(global::Shared.Network.ClassRoomDefinition), 4 },
                { typeof(global::Shared.Network.ClientVerificationData), 5 },
                { typeof(global::Shared.Network.EnvironmentGenericConfig), 6 },
                { typeof(global::Shared.Network.ExchangeRefreshTokenRequest), 7 },
                { typeof(global::Shared.Network.FirebaseConfig), 8 },
                { typeof(global::Shared.Network.GeneralConfigDefinition), 9 },
                { typeof(global::Shared.Network.GeneralResponse), 10 },
                { typeof(global::Shared.Network.GeneralRoomStatusResponse), 11 },
                { typeof(global::Shared.Network.GenericNotificationMessage), 12 },
                { typeof(global::Shared.Network.GoogleConfig), 13 },
                { typeof(global::Shared.Network.InGameStatusResponse), 14 },
                { typeof(global::Shared.Network.JoinClassRoomData), 15 },
                { typeof(global::Shared.Network.LoginRequest), 16 },
                { typeof(global::Shared.Network.LoginResponse), 17 },
                { typeof(global::Shared.Network.PrivateUserData), 18 },
                { typeof(global::Shared.Network.PublicUserData), 19 },
                { typeof(global::Shared.Network.RegisterRequest), 20 },
                { typeof(global::Shared.Network.RoomStatusResponse), 21 },
                { typeof(global::Shared.Network.UserData), 22 },
                { typeof(global::Shared.Network.Vec3D), 23 },
                { typeof(global::Shared.Network.VirtualRoomTickData), 24 },
                { typeof(global::Shared.Network.VirtualRoomTickResponse), 25 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ArrayFormatter<global::Shared.Network.PublicUserData>();
                case 1: return new MessagePack.Formatters.Shared.Network.AuthTypeFormatter();
                case 2: return new MessagePack.Formatters.Shared.Network.AccessTokenFormatter();
                case 3: return new MessagePack.Formatters.Shared.Network.AuthenticationDataFormatter();
                case 4: return new MessagePack.Formatters.Shared.Network.ClassRoomDefinitionFormatter();
                case 5: return new MessagePack.Formatters.Shared.Network.ClientVerificationDataFormatter();
                case 6: return new MessagePack.Formatters.Shared.Network.EnvironmentGenericConfigFormatter();
                case 7: return new MessagePack.Formatters.Shared.Network.ExchangeRefreshTokenRequestFormatter();
                case 8: return new MessagePack.Formatters.Shared.Network.FirebaseConfigFormatter();
                case 9: return new MessagePack.Formatters.Shared.Network.GeneralConfigDefinitionFormatter();
                case 10: return new MessagePack.Formatters.Shared.Network.GeneralResponseFormatter();
                case 11: return new MessagePack.Formatters.Shared.Network.GeneralRoomStatusResponseFormatter();
                case 12: return new MessagePack.Formatters.Shared.Network.GenericNotificationMessageFormatter();
                case 13: return new MessagePack.Formatters.Shared.Network.GoogleConfigFormatter();
                case 14: return new MessagePack.Formatters.Shared.Network.InGameStatusResponseFormatter();
                case 15: return new MessagePack.Formatters.Shared.Network.JoinClassRoomDataFormatter();
                case 16: return new MessagePack.Formatters.Shared.Network.LoginRequestFormatter();
                case 17: return new MessagePack.Formatters.Shared.Network.LoginResponseFormatter();
                case 18: return new MessagePack.Formatters.Shared.Network.PrivateUserDataFormatter();
                case 19: return new MessagePack.Formatters.Shared.Network.PublicUserDataFormatter();
                case 20: return new MessagePack.Formatters.Shared.Network.RegisterRequestFormatter();
                case 21: return new MessagePack.Formatters.Shared.Network.RoomStatusResponseFormatter();
                case 22: return new MessagePack.Formatters.Shared.Network.UserDataFormatter();
                case 23: return new MessagePack.Formatters.Shared.Network.Vec3DFormatter();
                case 24: return new MessagePack.Formatters.Shared.Network.VirtualRoomTickDataFormatter();
                case 25: return new MessagePack.Formatters.Shared.Network.VirtualRoomTickResponseFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Shared.Network
{

    public sealed class AuthTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.AuthType>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.AuthType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::Shared.Network.AuthType Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Shared.Network.AuthType)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Shared.Network
{
    public sealed class AccessTokenFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.AccessToken>
    {
        // Token
        private static global::System.ReadOnlySpan<byte> GetSpan_Token() => new byte[1 + 5] { 165, 84, 111, 107, 101, 110 };
        // ExpiresIn
        private static global::System.ReadOnlySpan<byte> GetSpan_ExpiresIn() => new byte[1 + 9] { 169, 69, 120, 112, 105, 114, 101, 115, 73, 110 };
        // IssuedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_IssuedAt() => new byte[1 + 8] { 168, 73, 115, 115, 117, 101, 100, 65, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.AccessToken value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Token());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Token, options);
            writer.WriteRaw(GetSpan_ExpiresIn());
            writer.Write(value.ExpiresIn);
            writer.WriteRaw(GetSpan_IssuedAt());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.IssuedAt, options);
        }

        public global::Shared.Network.AccessToken Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Token__ = default(string);
            var __ExpiresIn__ = default(int);
            var __IssuedAt__ = default(global::System.DateTime);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 474147942228UL) { goto FAIL; }

                        __Token__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ExpiresIn().Slice(1))) { goto FAIL; }

                        __ExpiresIn__ = reader.ReadInt32();
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 8377087168810808137UL) { goto FAIL; }

                        __IssuedAt__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::Shared.Network.AccessToken(__Token__, __ExpiresIn__, __IssuedAt__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AuthenticationDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.AuthenticationData>
    {
        // UserId
        private static global::System.ReadOnlySpan<byte> GetSpan_UserId() => new byte[1 + 6] { 166, 85, 115, 101, 114, 73, 100 };
        // UserName
        private static global::System.ReadOnlySpan<byte> GetSpan_UserName() => new byte[1 + 8] { 168, 85, 115, 101, 114, 78, 97, 109, 101 };
        // Expiration
        private static global::System.ReadOnlySpan<byte> GetSpan_Expiration() => new byte[1 + 10] { 170, 69, 120, 112, 105, 114, 97, 116, 105, 111, 110 };
        // AccessToken
        private static global::System.ReadOnlySpan<byte> GetSpan_AccessToken() => new byte[1 + 11] { 171, 65, 99, 99, 101, 115, 115, 84, 111, 107, 101, 110 };
        // RefreshToken
        private static global::System.ReadOnlySpan<byte> GetSpan_RefreshToken() => new byte[1 + 12] { 172, 82, 101, 102, 114, 101, 115, 104, 84, 111, 107, 101, 110 };
        // AuthSource
        private static global::System.ReadOnlySpan<byte> GetSpan_AuthSource() => new byte[1 + 10] { 170, 65, 117, 116, 104, 83, 111, 117, 114, 99, 101 };
        // Message
        private static global::System.ReadOnlySpan<byte> GetSpan_Message() => new byte[1 + 7] { 167, 77, 101, 115, 115, 97, 103, 101 };
        // Success
        private static global::System.ReadOnlySpan<byte> GetSpan_Success() => new byte[1 + 7] { 167, 83, 117, 99, 99, 101, 115, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.AuthenticationData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(8);
            writer.WriteRaw(GetSpan_UserId());
            writer.Write(value.UserId);
            writer.WriteRaw(GetSpan_UserName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.UserName, options);
            writer.WriteRaw(GetSpan_Expiration());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTimeOffset>(formatterResolver).Serialize(ref writer, value.Expiration, options);
            writer.WriteRaw(GetSpan_AccessToken());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.AccessToken>(formatterResolver).Serialize(ref writer, value.AccessToken, options);
            writer.WriteRaw(GetSpan_RefreshToken());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RefreshToken, options);
            writer.WriteRaw(GetSpan_AuthSource());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.AuthType>(formatterResolver).Serialize(ref writer, value.AuthSource, options);
            writer.WriteRaw(GetSpan_Message());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Message, options);
            writer.WriteRaw(GetSpan_Success());
            writer.Write(value.Success);
        }

        public global::Shared.Network.AuthenticationData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Shared.Network.AuthenticationData();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 110266614641493UL) { goto FAIL; }

                        ____result.UserId = reader.ReadInt32();
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7308604759846777685UL) { goto FAIL; }

                        ____result.UserName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7598805615304013893UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28271UL) { goto FAIL; }

                                reader.Skip();
                                continue;

                            case 8247620696624362817UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25955UL) { goto FAIL; }

                                ____result.AuthSource = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.AuthType>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AccessToken().Slice(1))) { goto FAIL; }

                        ____result.AccessToken = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.AccessToken>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_RefreshToken().Slice(1))) { goto FAIL; }

                        ____result.RefreshToken = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 28542640894207309UL:
                                ____result.Message = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 32496501618079059UL:
                                ____result.Success = reader.ReadBoolean();
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ClassRoomDefinitionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.ClassRoomDefinition>
    {
        // TeacherSeatPosition
        private static global::System.ReadOnlySpan<byte> GetSpan_TeacherSeatPosition() => new byte[1 + 19] { 179, 84, 101, 97, 99, 104, 101, 114, 83, 101, 97, 116, 80, 111, 115, 105, 116, 105, 111, 110 };
        // TeacherSeatRotation
        private static global::System.ReadOnlySpan<byte> GetSpan_TeacherSeatRotation() => new byte[1 + 19] { 179, 84, 101, 97, 99, 104, 101, 114, 83, 101, 97, 116, 82, 111, 116, 97, 116, 105, 111, 110 };
        // StartCenterSeatPosition
        private static global::System.ReadOnlySpan<byte> GetSpan_StartCenterSeatPosition() => new byte[1 + 23] { 183, 83, 116, 97, 114, 116, 67, 101, 110, 116, 101, 114, 83, 101, 97, 116, 80, 111, 115, 105, 116, 105, 111, 110 };
        // MaxColPerRow
        private static global::System.ReadOnlySpan<byte> GetSpan_MaxColPerRow() => new byte[1 + 12] { 172, 77, 97, 120, 67, 111, 108, 80, 101, 114, 82, 111, 119 };
        // MinGenerateSeats
        private static global::System.ReadOnlySpan<byte> GetSpan_MinGenerateSeats() => new byte[1 + 16] { 176, 77, 105, 110, 71, 101, 110, 101, 114, 97, 116, 101, 83, 101, 97, 116, 115 };
        // RowSpace
        private static global::System.ReadOnlySpan<byte> GetSpan_RowSpace() => new byte[1 + 8] { 168, 82, 111, 119, 83, 112, 97, 99, 101 };
        // ColSpace
        private static global::System.ReadOnlySpan<byte> GetSpan_ColSpace() => new byte[1 + 8] { 168, 67, 111, 108, 83, 112, 97, 99, 101 };
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.ClassRoomDefinition value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(9);
            writer.WriteRaw(GetSpan_TeacherSeatPosition());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.Vec3D>(formatterResolver).Serialize(ref writer, value.TeacherSeatPosition, options);
            writer.WriteRaw(GetSpan_TeacherSeatRotation());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.Vec3D>(formatterResolver).Serialize(ref writer, value.TeacherSeatRotation, options);
            writer.WriteRaw(GetSpan_StartCenterSeatPosition());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.Vec3D>(formatterResolver).Serialize(ref writer, value.StartCenterSeatPosition, options);
            writer.WriteRaw(GetSpan_MaxColPerRow());
            writer.Write(value.MaxColPerRow);
            writer.WriteRaw(GetSpan_MinGenerateSeats());
            writer.Write(value.MinGenerateSeats);
            writer.WriteRaw(GetSpan_RowSpace());
            writer.Write(value.RowSpace);
            writer.WriteRaw(GetSpan_ColSpace());
            writer.Write(value.ColSpace);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
        }

        public global::Shared.Network.ClassRoomDefinition Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Shared.Network.ClassRoomDefinition();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 19:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 6012979951511364948UL:
                                switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                                {
                                    default: goto FAIL;
                                    case 8388362702882627941UL:
                                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7237481UL) { goto FAIL; }

                                        ____result.TeacherSeatPosition = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.Vec3D>(formatterResolver).Deserialize(ref reader, options);
                                        continue;

                                    case 8386112002614124901UL:
                                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7237481UL) { goto FAIL; }

                                        ____result.TeacherSeatRotation = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.Vec3D>(formatterResolver).Deserialize(ref reader, options);
                                        continue;

                                }

                        }
                    case 23:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_StartCenterSeatPosition().Slice(1))) { goto FAIL; }

                        ____result.StartCenterSeatPosition = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.Vec3D>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_MaxColPerRow().Slice(1))) { goto FAIL; }

                        ____result.MaxColPerRow = reader.ReadInt32();
                        continue;
                    case 16:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_MinGenerateSeats().Slice(1))) { goto FAIL; }

                        ____result.MinGenerateSeats = reader.ReadInt32();
                        continue;
                    case 8:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7305790155589644114UL:
                                ____result.RowSpace = reader.ReadSingle();
                                continue;
                            case 7305790155588923203UL:
                                ____result.ColSpace = reader.ReadSingle();
                                continue;
                        }
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ClientVerificationDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.ClientVerificationData>
    {
        // IsUnderMaintenance
        private static global::System.ReadOnlySpan<byte> GetSpan_IsUnderMaintenance() => new byte[1 + 18] { 178, 73, 115, 85, 110, 100, 101, 114, 77, 97, 105, 110, 116, 101, 110, 97, 110, 99, 101 };
        // MaintenanceMessage
        private static global::System.ReadOnlySpan<byte> GetSpan_MaintenanceMessage() => new byte[1 + 18] { 178, 77, 97, 105, 110, 116, 101, 110, 97, 110, 99, 101, 77, 101, 115, 115, 97, 103, 101 };
        // IsValidVersion
        private static global::System.ReadOnlySpan<byte> GetSpan_IsValidVersion() => new byte[1 + 14] { 174, 73, 115, 86, 97, 108, 105, 100, 86, 101, 114, 115, 105, 111, 110 };
        // IsForceDownload
        private static global::System.ReadOnlySpan<byte> GetSpan_IsForceDownload() => new byte[1 + 15] { 175, 73, 115, 70, 111, 114, 99, 101, 68, 111, 119, 110, 108, 111, 97, 100 };
        // VersionMessage
        private static global::System.ReadOnlySpan<byte> GetSpan_VersionMessage() => new byte[1 + 14] { 174, 86, 101, 114, 115, 105, 111, 110, 77, 101, 115, 115, 97, 103, 101 };
        // DownloadUrl
        private static global::System.ReadOnlySpan<byte> GetSpan_DownloadUrl() => new byte[1 + 11] { 171, 68, 111, 119, 110, 108, 111, 97, 100, 85, 114, 108 };
        // FileSize
        private static global::System.ReadOnlySpan<byte> GetSpan_FileSize() => new byte[1 + 8] { 168, 70, 105, 108, 101, 83, 105, 122, 101 };
        // Message
        private static global::System.ReadOnlySpan<byte> GetSpan_Message() => new byte[1 + 7] { 167, 77, 101, 115, 115, 97, 103, 101 };
        // Success
        private static global::System.ReadOnlySpan<byte> GetSpan_Success() => new byte[1 + 7] { 167, 83, 117, 99, 99, 101, 115, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.ClientVerificationData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(9);
            writer.WriteRaw(GetSpan_IsUnderMaintenance());
            writer.Write(value.IsUnderMaintenance);
            writer.WriteRaw(GetSpan_MaintenanceMessage());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.MaintenanceMessage, options);
            writer.WriteRaw(GetSpan_IsValidVersion());
            writer.Write(value.IsValidVersion);
            writer.WriteRaw(GetSpan_IsForceDownload());
            writer.Write(value.IsForceDownload);
            writer.WriteRaw(GetSpan_VersionMessage());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.VersionMessage, options);
            writer.WriteRaw(GetSpan_DownloadUrl());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.DownloadUrl, options);
            writer.WriteRaw(GetSpan_FileSize());
            writer.Write(value.FileSize);
            writer.WriteRaw(GetSpan_Message());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Message, options);
            writer.WriteRaw(GetSpan_Success());
            writer.Write(value.Success);
        }

        public global::Shared.Network.ClientVerificationData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Shared.Network.ClientVerificationData();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 18:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 5580634370287694665UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_IsUnderMaintenance().Slice(1 + 8))) { goto FAIL; }

                                ____result.IsUnderMaintenance = reader.ReadBoolean();
                                continue;

                            case 7020660419860193613UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_MaintenanceMessage().Slice(1 + 8))) { goto FAIL; }

                                ____result.MaintenanceMessage = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 14:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 6225216499143308105UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 121424789598821UL) { goto FAIL; }

                                ____result.IsValidVersion = reader.ReadBoolean();
                                continue;

                            case 5579519487057749334UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 111494690992997UL) { goto FAIL; }

                                ____result.VersionMessage = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 15:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_IsForceDownload().Slice(1))) { goto FAIL; }

                        ____result.IsForceDownload = reader.ReadBoolean();
                        continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DownloadUrl().Slice(1))) { goto FAIL; }

                        ____result.DownloadUrl = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7312272751894227270UL) { goto FAIL; }

                        ____result.FileSize = reader.ReadInt32();
                        continue;
                    case 7:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 28542640894207309UL:
                                ____result.Message = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 32496501618079059UL:
                                ____result.Success = reader.ReadBoolean();
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EnvironmentGenericConfigFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.EnvironmentGenericConfig>
    {
        // LauncherUrl
        private static global::System.ReadOnlySpan<byte> GetSpan_LauncherUrl() => new byte[1 + 11] { 171, 76, 97, 117, 110, 99, 104, 101, 114, 85, 114, 108 };
        // EndPoints
        private static global::System.ReadOnlySpan<byte> GetSpan_EndPoints() => new byte[1 + 9] { 169, 69, 110, 100, 80, 111, 105, 110, 116, 115 };
        // ContractEndPoints
        private static global::System.ReadOnlySpan<byte> GetSpan_ContractEndPoints() => new byte[1 + 17] { 177, 67, 111, 110, 116, 114, 97, 99, 116, 69, 110, 100, 80, 111, 105, 110, 116, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.EnvironmentGenericConfig value, global::MessagePack.MessagePackSerializerOptions options)
        {
            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_LauncherUrl());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.LauncherUrl, options);
            writer.WriteRaw(GetSpan_EndPoints());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string[]>(formatterResolver).Serialize(ref writer, value.EndPoints, options);
            writer.WriteRaw(GetSpan_ContractEndPoints());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string[]>(formatterResolver).Serialize(ref writer, value.ContractEndPoints, options);
        }

        public global::Shared.Network.EnvironmentGenericConfig Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Shared.Network.EnvironmentGenericConfig();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_LauncherUrl().Slice(1))) { goto FAIL; }

                        ____result.LauncherUrl = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_EndPoints().Slice(1))) { goto FAIL; }

                        ____result.EndPoints = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 17:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ContractEndPoints().Slice(1))) { goto FAIL; }

                        ____result.ContractEndPoints = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ExchangeRefreshTokenRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.ExchangeRefreshTokenRequest>
    {
        // AccessToken
        private static global::System.ReadOnlySpan<byte> GetSpan_AccessToken() => new byte[1 + 11] { 171, 65, 99, 99, 101, 115, 115, 84, 111, 107, 101, 110 };
        // RefreshToken
        private static global::System.ReadOnlySpan<byte> GetSpan_RefreshToken() => new byte[1 + 12] { 172, 82, 101, 102, 114, 101, 115, 104, 84, 111, 107, 101, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.ExchangeRefreshTokenRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_AccessToken());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.AccessToken, options);
            writer.WriteRaw(GetSpan_RefreshToken());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RefreshToken, options);
        }

        public global::Shared.Network.ExchangeRefreshTokenRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Shared.Network.ExchangeRefreshTokenRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AccessToken().Slice(1))) { goto FAIL; }

                        reader.Skip();
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_RefreshToken().Slice(1))) { goto FAIL; }

                        reader.Skip();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class FirebaseConfigFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.FirebaseConfig>
    {
        // Issuer
        private static global::System.ReadOnlySpan<byte> GetSpan_Issuer() => new byte[1 + 6] { 166, 73, 115, 115, 117, 101, 114 };
        // Audience
        private static global::System.ReadOnlySpan<byte> GetSpan_Audience() => new byte[1 + 8] { 168, 65, 117, 100, 105, 101, 110, 99, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.FirebaseConfig value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Issuer());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Issuer, options);
            writer.WriteRaw(GetSpan_Audience());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Audience, options);
        }

        public global::Shared.Network.FirebaseConfig Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Shared.Network.FirebaseConfig();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 125780087763785UL) { goto FAIL; }

                        ____result.Issuer = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7305804402364020033UL) { goto FAIL; }

                        ____result.Audience = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GeneralConfigDefinitionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.GeneralConfigDefinition>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // AddressableBundleLabels
        private static global::System.ReadOnlySpan<byte> GetSpan_AddressableBundleLabels() => new byte[1 + 23] { 183, 65, 100, 100, 114, 101, 115, 115, 97, 98, 108, 101, 66, 117, 110, 100, 108, 101, 76, 97, 98, 101, 108, 115 };
        // CheckPreloadAssetErrorMessage
        private static global::System.ReadOnlySpan<byte> GetSpan_CheckPreloadAssetErrorMessage() => new byte[1 + 29] { 189, 67, 104, 101, 99, 107, 80, 114, 101, 108, 111, 97, 100, 65, 115, 115, 101, 116, 69, 114, 114, 111, 114, 77, 101, 115, 115, 97, 103, 101 };
        // DownloadAssetErrorMessage
        private static global::System.ReadOnlySpan<byte> GetSpan_DownloadAssetErrorMessage() => new byte[1 + 25] { 185, 68, 111, 119, 110, 108, 111, 97, 100, 65, 115, 115, 101, 116, 69, 114, 114, 111, 114, 77, 101, 115, 115, 97, 103, 101 };
        // FirebaseConfig
        private static global::System.ReadOnlySpan<byte> GetSpan_FirebaseConfig() => new byte[1 + 14] { 174, 70, 105, 114, 101, 98, 97, 115, 101, 67, 111, 110, 102, 105, 103 };
        // GoogleConfig
        private static global::System.ReadOnlySpan<byte> GetSpan_GoogleConfig() => new byte[1 + 12] { 172, 71, 111, 111, 103, 108, 101, 67, 111, 110, 102, 105, 103 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.GeneralConfigDefinition value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(7);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_AddressableBundleLabels());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string[]>(formatterResolver).Serialize(ref writer, value.AddressableBundleLabels, options);
            writer.WriteRaw(GetSpan_CheckPreloadAssetErrorMessage());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.CheckPreloadAssetErrorMessage, options);
            writer.WriteRaw(GetSpan_DownloadAssetErrorMessage());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.DownloadAssetErrorMessage, options);
            writer.WriteRaw(GetSpan_FirebaseConfig());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.FirebaseConfig>(formatterResolver).Serialize(ref writer, value.FirebaseConfig, options);
            writer.WriteRaw(GetSpan_GoogleConfig());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.GoogleConfig>(formatterResolver).Serialize(ref writer, value.GoogleConfig, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
        }

        public global::Shared.Network.GeneralConfigDefinition Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Shared.Network.GeneralConfigDefinition();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 23:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AddressableBundleLabels().Slice(1))) { goto FAIL; }

                        ____result.AddressableBundleLabels = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 29:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_CheckPreloadAssetErrorMessage().Slice(1))) { goto FAIL; }

                        ____result.CheckPreloadAssetErrorMessage = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 25:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DownloadAssetErrorMessage().Slice(1))) { goto FAIL; }

                        ____result.DownloadAssetErrorMessage = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 14:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_FirebaseConfig().Slice(1))) { goto FAIL; }

                        ____result.FirebaseConfig = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.FirebaseConfig>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_GoogleConfig().Slice(1))) { goto FAIL; }

                        ____result.GoogleConfig = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.GoogleConfig>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GeneralResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.GeneralResponse>
    {
        // Message
        private static global::System.ReadOnlySpan<byte> GetSpan_Message() => new byte[1 + 7] { 167, 77, 101, 115, 115, 97, 103, 101 };
        // Success
        private static global::System.ReadOnlySpan<byte> GetSpan_Success() => new byte[1 + 7] { 167, 83, 117, 99, 99, 101, 115, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.GeneralResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Message());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Message, options);
            writer.WriteRaw(GetSpan_Success());
            writer.Write(value.Success);
        }

        public global::Shared.Network.GeneralResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Shared.Network.GeneralResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 28542640894207309UL:
                                ____result.Message = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 32496501618079059UL:
                                ____result.Success = reader.ReadBoolean();
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GeneralRoomStatusResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.GeneralRoomStatusResponse>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Self
        private static global::System.ReadOnlySpan<byte> GetSpan_Self() => new byte[1 + 4] { 164, 83, 101, 108, 102 };
        // AllInRoom
        private static global::System.ReadOnlySpan<byte> GetSpan_AllInRoom() => new byte[1 + 9] { 169, 65, 108, 108, 73, 110, 82, 111, 111, 109 };
        // Others
        private static global::System.ReadOnlySpan<byte> GetSpan_Others() => new byte[1 + 6] { 166, 79, 116, 104, 101, 114, 115 };
        // Amount
        private static global::System.ReadOnlySpan<byte> GetSpan_Amount() => new byte[1 + 6] { 166, 65, 109, 111, 117, 110, 116 };
        // Message
        private static global::System.ReadOnlySpan<byte> GetSpan_Message() => new byte[1 + 7] { 167, 77, 101, 115, 115, 97, 103, 101 };
        // Success
        private static global::System.ReadOnlySpan<byte> GetSpan_Success() => new byte[1 + 7] { 167, 83, 117, 99, 99, 101, 115, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.GeneralRoomStatusResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(7);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Self());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.PrivateUserData>(formatterResolver).Serialize(ref writer, value.Self, options);
            writer.WriteRaw(GetSpan_AllInRoom());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.PublicUserData[]>(formatterResolver).Serialize(ref writer, value.AllInRoom, options);
            writer.WriteRaw(GetSpan_Others());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.PublicUserData[]>(formatterResolver).Serialize(ref writer, value.Others, options);
            writer.WriteRaw(GetSpan_Amount());
            writer.Write(value.Amount);
            writer.WriteRaw(GetSpan_Message());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Message, options);
            writer.WriteRaw(GetSpan_Success());
            writer.Write(value.Success);
        }

        public global::Shared.Network.GeneralRoomStatusResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Shared.Network.GeneralRoomStatusResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1718379859UL) { goto FAIL; }

                        ____result.Self = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.PrivateUserData>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AllInRoom().Slice(1))) { goto FAIL; }

                        ____result.AllInRoom = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.PublicUserData[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 126935164810319UL:
                                reader.Skip();
                                continue;
                            case 128017765461313UL:
                                reader.Skip();
                                continue;
                        }
                    case 7:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 28542640894207309UL:
                                ____result.Message = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 32496501618079059UL:
                                ____result.Success = reader.ReadBoolean();
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GenericNotificationMessageFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.GenericNotificationMessage>
    {
        // Title
        private static global::System.ReadOnlySpan<byte> GetSpan_Title() => new byte[1 + 5] { 165, 84, 105, 116, 108, 101 };
        // Message
        private static global::System.ReadOnlySpan<byte> GetSpan_Message() => new byte[1 + 7] { 167, 77, 101, 115, 115, 97, 103, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.GenericNotificationMessage value, global::MessagePack.MessagePackSerializerOptions options)
        {
            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Title());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Title, options);
            writer.WriteRaw(GetSpan_Message());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Message, options);
        }

        public global::Shared.Network.GenericNotificationMessage Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Shared.Network.GenericNotificationMessage();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 435611265364UL) { goto FAIL; }

                        ____result.Title = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28542640894207309UL) { goto FAIL; }

                        ____result.Message = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GoogleConfigFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.GoogleConfig>
    {
        // ClientId
        private static global::System.ReadOnlySpan<byte> GetSpan_ClientId() => new byte[1 + 8] { 168, 67, 108, 105, 101, 110, 116, 73, 100 };
        // ClientSecret
        private static global::System.ReadOnlySpan<byte> GetSpan_ClientSecret() => new byte[1 + 12] { 172, 67, 108, 105, 101, 110, 116, 83, 101, 99, 114, 101, 116 };
        // Scopes
        private static global::System.ReadOnlySpan<byte> GetSpan_Scopes() => new byte[1 + 6] { 166, 83, 99, 111, 112, 101, 115 };
        // LoginUri
        private static global::System.ReadOnlySpan<byte> GetSpan_LoginUri() => new byte[1 + 8] { 168, 76, 111, 103, 105, 110, 85, 114, 105 };
        // TokenUri
        private static global::System.ReadOnlySpan<byte> GetSpan_TokenUri() => new byte[1 + 8] { 168, 84, 111, 107, 101, 110, 85, 114, 105 };
        // UserInfoUri
        private static global::System.ReadOnlySpan<byte> GetSpan_UserInfoUri() => new byte[1 + 11] { 171, 85, 115, 101, 114, 73, 110, 102, 111, 85, 114, 105 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.GoogleConfig value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(GetSpan_ClientId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ClientId, options);
            writer.WriteRaw(GetSpan_ClientSecret());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ClientSecret, options);
            writer.WriteRaw(GetSpan_Scopes());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string[]>(formatterResolver).Serialize(ref writer, value.Scopes, options);
            writer.WriteRaw(GetSpan_LoginUri());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.LoginUri, options);
            writer.WriteRaw(GetSpan_TokenUri());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.TokenUri, options);
            writer.WriteRaw(GetSpan_UserInfoUri());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.UserInfoUri, options);
        }

        public global::Shared.Network.GoogleConfig Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Shared.Network.GoogleConfig();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 8:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7226435094589303875UL:
                                ____result.ClientId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 7598229454030597964UL:
                                ____result.LoginUri = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 7598229453963751252UL:
                                ____result.TokenUri = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ClientSecret().Slice(1))) { goto FAIL; }

                        ____result.ClientSecret = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126879515239251UL) { goto FAIL; }

                        ____result.Scopes = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_UserInfoUri().Slice(1))) { goto FAIL; }

                        ____result.UserInfoUri = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class InGameStatusResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.InGameStatusResponse>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Self
        private static global::System.ReadOnlySpan<byte> GetSpan_Self() => new byte[1 + 4] { 164, 83, 101, 108, 102 };
        // AllInRoom
        private static global::System.ReadOnlySpan<byte> GetSpan_AllInRoom() => new byte[1 + 9] { 169, 65, 108, 108, 73, 110, 82, 111, 111, 109 };
        // Others
        private static global::System.ReadOnlySpan<byte> GetSpan_Others() => new byte[1 + 6] { 166, 79, 116, 104, 101, 114, 115 };
        // Amount
        private static global::System.ReadOnlySpan<byte> GetSpan_Amount() => new byte[1 + 6] { 166, 65, 109, 111, 117, 110, 116 };
        // Message
        private static global::System.ReadOnlySpan<byte> GetSpan_Message() => new byte[1 + 7] { 167, 77, 101, 115, 115, 97, 103, 101 };
        // Success
        private static global::System.ReadOnlySpan<byte> GetSpan_Success() => new byte[1 + 7] { 167, 83, 117, 99, 99, 101, 115, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.InGameStatusResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(7);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Self());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.PrivateUserData>(formatterResolver).Serialize(ref writer, value.Self, options);
            writer.WriteRaw(GetSpan_AllInRoom());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.PublicUserData[]>(formatterResolver).Serialize(ref writer, value.AllInRoom, options);
            writer.WriteRaw(GetSpan_Others());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.PublicUserData[]>(formatterResolver).Serialize(ref writer, value.Others, options);
            writer.WriteRaw(GetSpan_Amount());
            writer.Write(value.Amount);
            writer.WriteRaw(GetSpan_Message());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Message, options);
            writer.WriteRaw(GetSpan_Success());
            writer.Write(value.Success);
        }

        public global::Shared.Network.InGameStatusResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Shared.Network.InGameStatusResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1718379859UL) { goto FAIL; }

                        ____result.Self = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.PrivateUserData>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AllInRoom().Slice(1))) { goto FAIL; }

                        ____result.AllInRoom = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.PublicUserData[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 126935164810319UL:
                                reader.Skip();
                                continue;
                            case 128017765461313UL:
                                reader.Skip();
                                continue;
                        }
                    case 7:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 28542640894207309UL:
                                ____result.Message = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 32496501618079059UL:
                                ____result.Success = reader.ReadBoolean();
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class JoinClassRoomDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.JoinClassRoomData>
    {
        // RoomId
        private static global::System.ReadOnlySpan<byte> GetSpan_RoomId() => new byte[1 + 6] { 166, 82, 111, 111, 109, 73, 100 };
        // UserName
        private static global::System.ReadOnlySpan<byte> GetSpan_UserName() => new byte[1 + 8] { 168, 85, 115, 101, 114, 78, 97, 109, 101 };
        // AvatarPath
        private static global::System.ReadOnlySpan<byte> GetSpan_AvatarPath() => new byte[1 + 10] { 170, 65, 118, 97, 116, 97, 114, 80, 97, 116, 104 };
        // Amount
        private static global::System.ReadOnlySpan<byte> GetSpan_Amount() => new byte[1 + 6] { 166, 65, 109, 111, 117, 110, 116 };
        // Password
        private static global::System.ReadOnlySpan<byte> GetSpan_Password() => new byte[1 + 8] { 168, 80, 97, 115, 115, 119, 111, 114, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.JoinClassRoomData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_RoomId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RoomId, options);
            writer.WriteRaw(GetSpan_UserName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.UserName, options);
            writer.WriteRaw(GetSpan_AvatarPath());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.AvatarPath, options);
            writer.WriteRaw(GetSpan_Amount());
            writer.Write(value.Amount);
            writer.WriteRaw(GetSpan_Password());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Password, options);
        }

        public global::Shared.Network.JoinClassRoomData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Shared.Network.JoinClassRoomData();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 110266531409746UL:
                                ____result.RoomId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 128017765461313UL:
                                ____result.Amount = reader.ReadInt32();
                                continue;
                        }
                    case 8:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7308604759846777685UL:
                                ____result.UserName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 7237970109966541136UL:
                                ____result.Password = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AvatarPath().Slice(1))) { goto FAIL; }

                        ____result.AvatarPath = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LoginRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.LoginRequest>
    {
        // Username
        private static global::System.ReadOnlySpan<byte> GetSpan_Username() => new byte[1 + 8] { 168, 85, 115, 101, 114, 110, 97, 109, 101 };
        // Password
        private static global::System.ReadOnlySpan<byte> GetSpan_Password() => new byte[1 + 8] { 168, 80, 97, 115, 115, 119, 111, 114, 100 };
        // RemoteIpAddress
        private static global::System.ReadOnlySpan<byte> GetSpan_RemoteIpAddress() => new byte[1 + 15] { 175, 82, 101, 109, 111, 116, 101, 73, 112, 65, 100, 100, 114, 101, 115, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.LoginRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Username());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Username, options);
            writer.WriteRaw(GetSpan_Password());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Password, options);
            writer.WriteRaw(GetSpan_RemoteIpAddress());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RemoteIpAddress, options);
        }

        public global::Shared.Network.LoginRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Shared.Network.LoginRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 8:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7308604897285731157UL:
                                ____result.Username = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 7237970109966541136UL:
                                ____result.Password = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 15:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_RemoteIpAddress().Slice(1))) { goto FAIL; }

                        ____result.RemoteIpAddress = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LoginResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.LoginResponse>
    {
        // AccessToken
        private static global::System.ReadOnlySpan<byte> GetSpan_AccessToken() => new byte[1 + 11] { 171, 65, 99, 99, 101, 115, 115, 84, 111, 107, 101, 110 };
        // RefreshToken
        private static global::System.ReadOnlySpan<byte> GetSpan_RefreshToken() => new byte[1 + 12] { 172, 82, 101, 102, 114, 101, 115, 104, 84, 111, 107, 101, 110 };
        // AuthSource
        private static global::System.ReadOnlySpan<byte> GetSpan_AuthSource() => new byte[1 + 10] { 170, 65, 117, 116, 104, 83, 111, 117, 114, 99, 101 };
        // Message
        private static global::System.ReadOnlySpan<byte> GetSpan_Message() => new byte[1 + 7] { 167, 77, 101, 115, 115, 97, 103, 101 };
        // Success
        private static global::System.ReadOnlySpan<byte> GetSpan_Success() => new byte[1 + 7] { 167, 83, 117, 99, 99, 101, 115, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.LoginResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_AccessToken());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.AccessToken>(formatterResolver).Serialize(ref writer, value.AccessToken, options);
            writer.WriteRaw(GetSpan_RefreshToken());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RefreshToken, options);
            writer.WriteRaw(GetSpan_AuthSource());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.AuthType>(formatterResolver).Serialize(ref writer, value.AuthSource, options);
            writer.WriteRaw(GetSpan_Message());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Message, options);
            writer.WriteRaw(GetSpan_Success());
            writer.Write(value.Success);
        }

        public global::Shared.Network.LoginResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Shared.Network.LoginResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AccessToken().Slice(1))) { goto FAIL; }

                        ____result.AccessToken = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.AccessToken>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_RefreshToken().Slice(1))) { goto FAIL; }

                        ____result.RefreshToken = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AuthSource().Slice(1))) { goto FAIL; }

                        ____result.AuthSource = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.AuthType>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 28542640894207309UL:
                                ____result.Message = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 32496501618079059UL:
                                ____result.Success = reader.ReadBoolean();
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PrivateUserDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.PrivateUserData>
    {
        // Index
        private static global::System.ReadOnlySpan<byte> GetSpan_Index() => new byte[1 + 5] { 165, 73, 110, 100, 101, 120 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // AvatarPath
        private static global::System.ReadOnlySpan<byte> GetSpan_AvatarPath() => new byte[1 + 10] { 170, 65, 118, 97, 116, 97, 114, 80, 97, 116, 104 };
        // HeadRotation
        private static global::System.ReadOnlySpan<byte> GetSpan_HeadRotation() => new byte[1 + 12] { 172, 72, 101, 97, 100, 82, 111, 116, 97, 116, 105, 111, 110 };
        // IsHost
        private static global::System.ReadOnlySpan<byte> GetSpan_IsHost() => new byte[1 + 6] { 166, 73, 115, 72, 111, 115, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.PrivateUserData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_Index());
            writer.Write(value.Index);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_AvatarPath());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.AvatarPath, options);
            writer.WriteRaw(GetSpan_HeadRotation());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.Vec3D>(formatterResolver).Serialize(ref writer, value.HeadRotation, options);
            writer.WriteRaw(GetSpan_IsHost());
            writer.Write(value.IsHost);
        }

        public global::Shared.Network.PrivateUserData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Shared.Network.PrivateUserData();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 517097156169UL) { goto FAIL; }

                        ____result.Index = reader.ReadInt32();
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AvatarPath().Slice(1))) { goto FAIL; }

                        ____result.AvatarPath = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_HeadRotation().Slice(1))) { goto FAIL; }

                        ____result.HeadRotation = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.Vec3D>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 128039137080137UL) { goto FAIL; }

                        reader.Skip();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PublicUserDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.PublicUserData>
    {
        // Index
        private static global::System.ReadOnlySpan<byte> GetSpan_Index() => new byte[1 + 5] { 165, 73, 110, 100, 101, 120 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // AvatarPath
        private static global::System.ReadOnlySpan<byte> GetSpan_AvatarPath() => new byte[1 + 10] { 170, 65, 118, 97, 116, 97, 114, 80, 97, 116, 104 };
        // HeadRotation
        private static global::System.ReadOnlySpan<byte> GetSpan_HeadRotation() => new byte[1 + 12] { 172, 72, 101, 97, 100, 82, 111, 116, 97, 116, 105, 111, 110 };
        // IsHost
        private static global::System.ReadOnlySpan<byte> GetSpan_IsHost() => new byte[1 + 6] { 166, 73, 115, 72, 111, 115, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.PublicUserData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_Index());
            writer.Write(value.Index);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_AvatarPath());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.AvatarPath, options);
            writer.WriteRaw(GetSpan_HeadRotation());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.Vec3D>(formatterResolver).Serialize(ref writer, value.HeadRotation, options);
            writer.WriteRaw(GetSpan_IsHost());
            writer.Write(value.IsHost);
        }

        public global::Shared.Network.PublicUserData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Shared.Network.PublicUserData();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 517097156169UL) { goto FAIL; }

                        ____result.Index = reader.ReadInt32();
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_AvatarPath().Slice(1))) { goto FAIL; }

                        ____result.AvatarPath = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_HeadRotation().Slice(1))) { goto FAIL; }

                        ____result.HeadRotation = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.Vec3D>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 128039137080137UL) { goto FAIL; }

                        reader.Skip();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RegisterRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.RegisterRequest>
    {
        // Email
        private static global::System.ReadOnlySpan<byte> GetSpan_Email() => new byte[1 + 5] { 165, 69, 109, 97, 105, 108 };
        // RePassword
        private static global::System.ReadOnlySpan<byte> GetSpan_RePassword() => new byte[1 + 10] { 170, 82, 101, 80, 97, 115, 115, 119, 111, 114, 100 };
        // Role
        private static global::System.ReadOnlySpan<byte> GetSpan_Role() => new byte[1 + 4] { 164, 82, 111, 108, 101 };
        // Username
        private static global::System.ReadOnlySpan<byte> GetSpan_Username() => new byte[1 + 8] { 168, 85, 115, 101, 114, 110, 97, 109, 101 };
        // Password
        private static global::System.ReadOnlySpan<byte> GetSpan_Password() => new byte[1 + 8] { 168, 80, 97, 115, 115, 119, 111, 114, 100 };
        // RemoteIpAddress
        private static global::System.ReadOnlySpan<byte> GetSpan_RemoteIpAddress() => new byte[1 + 15] { 175, 82, 101, 109, 111, 116, 101, 73, 112, 65, 100, 100, 114, 101, 115, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.RegisterRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(GetSpan_Email());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Email, options);
            writer.WriteRaw(GetSpan_RePassword());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RePassword, options);
            writer.WriteRaw(GetSpan_Role());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Role, options);
            writer.WriteRaw(GetSpan_Username());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Username, options);
            writer.WriteRaw(GetSpan_Password());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Password, options);
            writer.WriteRaw(GetSpan_RemoteIpAddress());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RemoteIpAddress, options);
        }

        public global::Shared.Network.RegisterRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Shared.Network.RegisterRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 465624460613UL) { goto FAIL; }

                        ____result.Email = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_RePassword().Slice(1))) { goto FAIL; }

                        ____result.RePassword = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701605202UL) { goto FAIL; }

                        ____result.Role = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7308604897285731157UL:
                                ____result.Username = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 7237970109966541136UL:
                                ____result.Password = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 15:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_RemoteIpAddress().Slice(1))) { goto FAIL; }

                        ____result.RemoteIpAddress = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RoomStatusResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.RoomStatusResponse>
    {
        // MaxAmount
        private static global::System.ReadOnlySpan<byte> GetSpan_MaxAmount() => new byte[1 + 9] { 169, 77, 97, 120, 65, 109, 111, 117, 110, 116 };
        // Password
        private static global::System.ReadOnlySpan<byte> GetSpan_Password() => new byte[1 + 8] { 168, 80, 97, 115, 115, 119, 111, 114, 100 };
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Self
        private static global::System.ReadOnlySpan<byte> GetSpan_Self() => new byte[1 + 4] { 164, 83, 101, 108, 102 };
        // AllInRoom
        private static global::System.ReadOnlySpan<byte> GetSpan_AllInRoom() => new byte[1 + 9] { 169, 65, 108, 108, 73, 110, 82, 111, 111, 109 };
        // Others
        private static global::System.ReadOnlySpan<byte> GetSpan_Others() => new byte[1 + 6] { 166, 79, 116, 104, 101, 114, 115 };
        // Amount
        private static global::System.ReadOnlySpan<byte> GetSpan_Amount() => new byte[1 + 6] { 166, 65, 109, 111, 117, 110, 116 };
        // Message
        private static global::System.ReadOnlySpan<byte> GetSpan_Message() => new byte[1 + 7] { 167, 77, 101, 115, 115, 97, 103, 101 };
        // Success
        private static global::System.ReadOnlySpan<byte> GetSpan_Success() => new byte[1 + 7] { 167, 83, 117, 99, 99, 101, 115, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.RoomStatusResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(9);
            writer.WriteRaw(GetSpan_MaxAmount());
            writer.Write(value.MaxAmount);
            writer.WriteRaw(GetSpan_Password());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Password, options);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Self());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.PrivateUserData>(formatterResolver).Serialize(ref writer, value.Self, options);
            writer.WriteRaw(GetSpan_AllInRoom());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.PublicUserData[]>(formatterResolver).Serialize(ref writer, value.AllInRoom, options);
            writer.WriteRaw(GetSpan_Others());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.PublicUserData[]>(formatterResolver).Serialize(ref writer, value.Others, options);
            writer.WriteRaw(GetSpan_Amount());
            writer.Write(value.Amount);
            writer.WriteRaw(GetSpan_Message());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Message, options);
            writer.WriteRaw(GetSpan_Success());
            writer.Write(value.Success);
        }

        public global::Shared.Network.RoomStatusResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Shared.Network.RoomStatusResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7959390431487746381UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                ____result.MaxAmount = reader.ReadInt32();
                                continue;

                            case 8029727294256606273UL:
                                if (stringKey[0] != 109) { goto FAIL; }

                                ____result.AllInRoom = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.PublicUserData[]>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7237970109966541136UL) { goto FAIL; }

                        ____result.Password = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1718379859UL) { goto FAIL; }

                        ____result.Self = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.PrivateUserData>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 126935164810319UL:
                                reader.Skip();
                                continue;
                            case 128017765461313UL:
                                reader.Skip();
                                continue;
                        }
                    case 7:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 28542640894207309UL:
                                ____result.Message = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 32496501618079059UL:
                                ____result.Success = reader.ReadBoolean();
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UserDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.UserData>
    {
        // UserId
        private static global::System.ReadOnlySpan<byte> GetSpan_UserId() => new byte[1 + 6] { 166, 85, 115, 101, 114, 73, 100 };
        // UserName
        private static global::System.ReadOnlySpan<byte> GetSpan_UserName() => new byte[1 + 8] { 168, 85, 115, 101, 114, 78, 97, 109, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.UserData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_UserId());
            writer.Write(value.UserId);
            writer.WriteRaw(GetSpan_UserName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.UserName, options);
        }

        public global::Shared.Network.UserData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Shared.Network.UserData();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 110266614641493UL) { goto FAIL; }

                        ____result.UserId = reader.ReadInt32();
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7308604759846777685UL) { goto FAIL; }

                        ____result.UserName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Vec3DFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.Vec3D>
    {
        // x
        private static global::System.ReadOnlySpan<byte> GetSpan_x() => new byte[1 + 1] { 161, 120 };
        // y
        private static global::System.ReadOnlySpan<byte> GetSpan_y() => new byte[1 + 1] { 161, 121 };
        // z
        private static global::System.ReadOnlySpan<byte> GetSpan_z() => new byte[1 + 1] { 161, 122 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.Vec3D value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_x());
            writer.Write(value.x);
            writer.WriteRaw(GetSpan_y());
            writer.Write(value.y);
            writer.WriteRaw(GetSpan_z());
            writer.Write(value.z);
        }

        public global::Shared.Network.Vec3D Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var __x__ = default(float);
            var __y__ = default(float);
            var __z__ = default(float);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 1:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 120UL:
                                __x__ = reader.ReadSingle();
                                continue;
                            case 121UL:
                                __y__ = reader.ReadSingle();
                                continue;
                            case 122UL:
                                __z__ = reader.ReadSingle();
                                continue;
                        }

                }
            }

            var ____result = new global::Shared.Network.Vec3D(__x__, __y__, __z__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class VirtualRoomTickDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.VirtualRoomTickData>
    {
        // HeadRotation
        private static global::System.ReadOnlySpan<byte> GetSpan_HeadRotation() => new byte[1 + 12] { 172, 72, 101, 97, 100, 82, 111, 116, 97, 116, 105, 111, 110 };
        // Texture
        private static global::System.ReadOnlySpan<byte> GetSpan_Texture() => new byte[1 + 7] { 167, 84, 101, 120, 116, 117, 114, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.VirtualRoomTickData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_HeadRotation());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.Vec3D>(formatterResolver).Serialize(ref writer, value.HeadRotation, options);
            writer.WriteRaw(GetSpan_Texture());
            writer.Write(value.Texture);
        }

        public global::Shared.Network.VirtualRoomTickData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Shared.Network.VirtualRoomTickData();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_HeadRotation().Slice(1))) { goto FAIL; }

                        ____result.HeadRotation = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.Vec3D>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28554821438563668UL) { goto FAIL; }

                        ____result.Texture = global::MessagePack.Internal.CodeGenHelpers.GetArrayFromNullableSequence(reader.ReadBytes());
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class VirtualRoomTickResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Network.VirtualRoomTickResponse>
    {
        // User
        private static global::System.ReadOnlySpan<byte> GetSpan_User() => new byte[1 + 4] { 164, 85, 115, 101, 114 };
        // Texture
        private static global::System.ReadOnlySpan<byte> GetSpan_Texture() => new byte[1 + 7] { 167, 84, 101, 120, 116, 117, 114, 101 };
        // Message
        private static global::System.ReadOnlySpan<byte> GetSpan_Message() => new byte[1 + 7] { 167, 77, 101, 115, 115, 97, 103, 101 };
        // Success
        private static global::System.ReadOnlySpan<byte> GetSpan_Success() => new byte[1 + 7] { 167, 83, 117, 99, 99, 101, 115, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Network.VirtualRoomTickResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_User());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.PublicUserData>(formatterResolver).Serialize(ref writer, value.User, options);
            writer.WriteRaw(GetSpan_Texture());
            writer.Write(value.Texture);
            writer.WriteRaw(GetSpan_Message());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Message, options);
            writer.WriteRaw(GetSpan_Success());
            writer.Write(value.Success);
        }

        public global::Shared.Network.VirtualRoomTickResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Shared.Network.VirtualRoomTickResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1919251285UL) { goto FAIL; }

                        ____result.User = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Network.PublicUserData>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 28554821438563668UL:
                                ____result.Texture = global::MessagePack.Internal.CodeGenHelpers.GetArrayFromNullableSequence(reader.ReadBytes());
                                continue;
                            case 28542640894207309UL:
                                ____result.Message = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 32496501618079059UL:
                                ____result.Success = reader.ReadBoolean();
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

