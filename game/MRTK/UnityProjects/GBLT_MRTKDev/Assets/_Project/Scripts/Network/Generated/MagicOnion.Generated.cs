// <auto-generated />
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

// NOTE: Disable warnings for nullable reference types.
// `#nullable disable` causes compile error on old C# compilers (-7.3)
#pragma warning disable 8603 // Possible null reference return.
#pragma warning disable 8618 // Non-nullable variable must contain a non-null value when exiting constructor. Consider declaring it as nullable.
#pragma warning disable 8625 // Cannot convert null literal to non-nullable reference type.

namespace MagicOnion
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::MagicOnion;
    using global::MagicOnion.Client;

    public static partial class MagicOnionInitializer
    {
        static bool isRegistered = false;

#if UNITY_2019_4_OR_NEWER
        [UnityEngine.RuntimeInitializeOnLoadMethod(UnityEngine.RuntimeInitializeLoadType.BeforeSceneLoad)]
#elif NET5_0_OR_GREATER
        [System.Runtime.CompilerServices.ModuleInitializer]
#endif
        public static void Register()
        {
            if (isRegistered) return;
            isRegistered = true;

            global::MagicOnion.Client.MagicOnionClientFactoryProvider.Default =
                (global::MagicOnion.Client.MagicOnionClientFactoryProvider.Default is global::MagicOnion.Client.ImmutableMagicOnionClientFactoryProvider immutableMagicOnionClientFactoryProvider)
                    ? immutableMagicOnionClientFactoryProvider.Add(MagicOnionGeneratedClientFactoryProvider.Instance)
                    : new global::MagicOnion.Client.ImmutableMagicOnionClientFactoryProvider(MagicOnionGeneratedClientFactoryProvider.Instance);

            global::MagicOnion.Client.StreamingHubClientFactoryProvider.Default =
                (global::MagicOnion.Client.StreamingHubClientFactoryProvider.Default is global::MagicOnion.Client.ImmutableStreamingHubClientFactoryProvider immutableStreamingHubClientFactoryProvider)
                    ? immutableStreamingHubClientFactoryProvider.Add(MagicOnionGeneratedClientFactoryProvider.Instance)
                    : new global::MagicOnion.Client.ImmutableStreamingHubClientFactoryProvider(MagicOnionGeneratedClientFactoryProvider.Instance);
        }
    }

    public partial class MagicOnionGeneratedClientFactoryProvider : global::MagicOnion.Client.IMagicOnionClientFactoryProvider, global::MagicOnion.Client.IStreamingHubClientFactoryProvider
    {
        public static MagicOnionGeneratedClientFactoryProvider Instance { get; } = new MagicOnionGeneratedClientFactoryProvider();

        MagicOnionGeneratedClientFactoryProvider() {}

        bool global::MagicOnion.Client.IMagicOnionClientFactoryProvider.TryGetFactory<T>(out global::MagicOnion.Client.MagicOnionClientFactoryDelegate<T> factory)
            => (factory = MagicOnionClientFactoryCache<T>.Factory) != null;

        bool global::MagicOnion.Client.IStreamingHubClientFactoryProvider.TryGetFactory<TStreamingHub, TReceiver>(out global::MagicOnion.Client.StreamingHubClientFactoryDelegate<TStreamingHub, TReceiver> factory)
            => (factory = StreamingHubClientFactoryCache<TStreamingHub, TReceiver>.Factory) != null;

        static class MagicOnionClientFactoryCache<T> where T : global::MagicOnion.IService<T>
        {
            public readonly static global::MagicOnion.Client.MagicOnionClientFactoryDelegate<T> Factory;

            static MagicOnionClientFactoryCache()
            {
                object factory = default(global::MagicOnion.Client.MagicOnionClientFactoryDelegate<T>);

                if (typeof(T) == typeof(global::Shared.Network.IGenericService))
                {
                    factory = ((global::MagicOnion.Client.MagicOnionClientFactoryDelegate<global::Shared.Network.IGenericService>)((x, y) => new Shared.Network.GenericServiceClient(x, y)));
                }
                if (typeof(T) == typeof(global::Shared.Network.IRpcAuthService))
                {
                    factory = ((global::MagicOnion.Client.MagicOnionClientFactoryDelegate<global::Shared.Network.IRpcAuthService>)((x, y) => new Shared.Network.RpcAuthServiceClient(x, y)));
                }
                if (typeof(T) == typeof(global::Shared.Network.IRpcUserService))
                {
                    factory = ((global::MagicOnion.Client.MagicOnionClientFactoryDelegate<global::Shared.Network.IRpcUserService>)((x, y) => new Shared.Network.RpcUserServiceClient(x, y)));
                }
                Factory = (global::MagicOnion.Client.MagicOnionClientFactoryDelegate<T>)factory;
            }
        }
        
        static class StreamingHubClientFactoryCache<TStreamingHub, TReceiver> where TStreamingHub : global::MagicOnion.IStreamingHub<TStreamingHub, TReceiver>
        {
            public readonly static global::MagicOnion.Client.StreamingHubClientFactoryDelegate<TStreamingHub, TReceiver> Factory;

            static StreamingHubClientFactoryCache()
            {
                object factory = default(global::MagicOnion.Client.StreamingHubClientFactoryDelegate<TStreamingHub, TReceiver>);

                if (typeof(TStreamingHub) == typeof(global::Shared.Network.IClassRoomHub) && typeof(TReceiver) == typeof(global::Shared.Network.IClassRoomHubReceiver))
                {
                    factory = ((global::MagicOnion.Client.StreamingHubClientFactoryDelegate<global::Shared.Network.IClassRoomHub, global::Shared.Network.IClassRoomHubReceiver>)((a, _, b, c, d, e) => new Shared.Network.ClassRoomHubClient(a, b, c, d, e)));
                }
                if (typeof(TStreamingHub) == typeof(global::Shared.Network.IQuizzesHub) && typeof(TReceiver) == typeof(global::Shared.Network.IQuizzesHubReceiver))
                {
                    factory = ((global::MagicOnion.Client.StreamingHubClientFactoryDelegate<global::Shared.Network.IQuizzesHub, global::Shared.Network.IQuizzesHubReceiver>)((a, _, b, c, d, e) => new Shared.Network.QuizzesHubClient(a, b, c, d, e)));
                }
                if (typeof(TStreamingHub) == typeof(global::Shared.Network.ITimerHub) && typeof(TReceiver) == typeof(global::Shared.Network.ITimerHubReceiver))
                {
                    factory = ((global::MagicOnion.Client.StreamingHubClientFactoryDelegate<global::Shared.Network.ITimerHub, global::Shared.Network.ITimerHubReceiver>)((a, _, b, c, d, e) => new Shared.Network.TimerHubClient(a, b, c, d, e)));
                }

                Factory = (global::MagicOnion.Client.StreamingHubClientFactoryDelegate<TStreamingHub, TReceiver>)factory;
            }
        }
    }

}

#pragma warning restore 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 612
#pragma warning restore 618

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

// NOTE: Disable warnings for nullable reference types.
// `#nullable disable` causes compile error on old C# compilers (-7.3)
#pragma warning disable 8603 // Possible null reference return.
#pragma warning disable 8618 // Non-nullable variable must contain a non-null value when exiting constructor. Consider declaring it as nullable.
#pragma warning disable 8625 // Cannot convert null literal to non-nullable reference type.
namespace MagicOnion.Resolvers
{
    using global::System;
    using global::MessagePack;

    partial class PreserveAttribute : global::System.Attribute {}
    public class MagicOnionResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new MagicOnionResolver();
    
        MagicOnionResolver() {}
    
        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
            => FormatterCache<T>.formatter;
    
        static class FormatterCache<T>
        {
            public static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> formatter;
    
            static FormatterCache()
            {
                var f = MagicOnionResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }
    internal static class MagicOnionResolverGetFormatterHelper
    {
        static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;
    
        static MagicOnionResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(5)
            {
                {typeof(global::MagicOnion.DynamicArgumentTuple<global::Shared.Network.InviteToGameData, global::Shared.Network.PublicUserData>), 0 },
                {typeof(global::MagicOnion.DynamicArgumentTuple<global::Shared.Network.QuizzesStatusResponse, global::Shared.Network.QuizzesUserData>), 1 },
                {typeof(global::MagicOnion.DynamicArgumentTuple<global::Shared.Network.RoomStatusResponse, global::Shared.Network.PublicUserData>), 2 },
                {typeof(global::MagicOnion.DynamicArgumentTuple<global::System.Int32, global::System.Int32>), 3 },
                {typeof(global::MagicOnion.DynamicArgumentTuple<global::System.String, global::System.String, global::System.String>), 4 },
            };
        }
        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }
        
            switch (key)
            {
                case 0: return new global::MagicOnion.DynamicArgumentTupleFormatter<global::Shared.Network.InviteToGameData, global::Shared.Network.PublicUserData>(default(global::Shared.Network.InviteToGameData), default(global::Shared.Network.PublicUserData));
                case 1: return new global::MagicOnion.DynamicArgumentTupleFormatter<global::Shared.Network.QuizzesStatusResponse, global::Shared.Network.QuizzesUserData>(default(global::Shared.Network.QuizzesStatusResponse), default(global::Shared.Network.QuizzesUserData));
                case 2: return new global::MagicOnion.DynamicArgumentTupleFormatter<global::Shared.Network.RoomStatusResponse, global::Shared.Network.PublicUserData>(default(global::Shared.Network.RoomStatusResponse), default(global::Shared.Network.PublicUserData));
                case 3: return new global::MagicOnion.DynamicArgumentTupleFormatter<global::System.Int32, global::System.Int32>(default(global::System.Int32), default(global::System.Int32));
                case 4: return new global::MagicOnion.DynamicArgumentTupleFormatter<global::System.String, global::System.String, global::System.String>(default(global::System.String), default(global::System.String), default(global::System.String));
                default: return null;
            }
        }
    }
    /// <summary>Type hints for Ahead-of-Time compilation.</summary>
    [MagicOnion.Resolvers.Preserve]
    internal static class TypeHints
    {
        [MagicOnion.Resolvers.Preserve]
        internal static void Register()
        {
            _ = MagicOnionResolver.Instance.GetFormatter<global::MagicOnion.DynamicArgumentTuple<global::Shared.Network.InviteToGameData, global::Shared.Network.PublicUserData>>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::MagicOnion.DynamicArgumentTuple<global::Shared.Network.QuizzesStatusResponse, global::Shared.Network.QuizzesUserData>>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::MagicOnion.DynamicArgumentTuple<global::Shared.Network.RoomStatusResponse, global::Shared.Network.PublicUserData>>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::MagicOnion.DynamicArgumentTuple<global::System.Int32, global::System.Int32>>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::MagicOnion.DynamicArgumentTuple<global::System.String, global::System.String, global::System.String>>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::MessagePack.Nil>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::Shared.Network.AnswerData>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::Shared.Network.AuthenticationData>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::Shared.Network.ClientVerificationData>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::Shared.Network.EnvironmentGenericConfig>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::Shared.Network.ExchangeRefreshTokenRequest>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::Shared.Network.InviteToGameData>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::Shared.Network.JoinClassRoomData>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::Shared.Network.JoinQuizzesData>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::Shared.Network.LoginRequest>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::Shared.Network.PublicUserData>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::Shared.Network.QuizCollectionDto>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::Shared.Network.QuizCollectionListDto>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::Shared.Network.QuizzesStatusResponse>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::Shared.Network.QuizzesUserData>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::Shared.Network.RegisterRequest>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::Shared.Network.RoomStatusResponse>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::Shared.Network.SharingTickData>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::Shared.Network.UserData>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::Shared.Network.VirtualRoomTickData>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::Shared.Network.VirtualRoomTickResponse>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::System.Byte>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::System.Byte[]>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::System.DateTime>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::System.Int32>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::System.String>();
            _ = MagicOnionResolver.Instance.GetFormatter<global::System.TimeSpan>();
        }
    }
}
#pragma warning restore 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 612
#pragma warning restore 618

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

// NOTE: Disable warnings for nullable reference types.
// `#nullable disable` causes compile error on old C# compilers (-7.3)
#pragma warning disable 8603 // Possible null reference return.
#pragma warning disable 8618 // Non-nullable variable must contain a non-null value when exiting constructor. Consider declaring it as nullable.
#pragma warning disable 8625 // Cannot convert null literal to non-nullable reference type.

namespace Shared.Network
{
    using global::System;
    using global::Grpc.Core;
    using global::MagicOnion;
    using global::MagicOnion.Client;
    using global::MessagePack;
    
    [global::MagicOnion.Ignore]
    public class GenericServiceClient : global::MagicOnion.Client.MagicOnionClientBase<global::Shared.Network.IGenericService>, global::Shared.Network.IGenericService
    {
        class ClientCore
        {
            public global::MagicOnion.Client.Internal.RawMethodInvoker<global::System.String, global::Shared.Network.ClientVerificationData> VerifyClient;
            public global::MagicOnion.Client.Internal.RawMethodInvoker<global::MessagePack.Nil, global::System.DateTime> GetServerTime;
            public global::MagicOnion.Client.Internal.RawMethodInvoker<global::MessagePack.Nil, global::System.Byte[]> GetDefinitions;
            public global::MagicOnion.Client.Internal.RawMethodInvoker<global::MessagePack.Nil, global::Shared.Network.EnvironmentGenericConfig> GetGenericConfig;
            public ClientCore(global::MagicOnion.Serialization.IMagicOnionSerializerProvider serializerProvider)
            {
                this.VerifyClient = global::MagicOnion.Client.Internal.RawMethodInvoker.Create_RefType_RefType<global::System.String, global::Shared.Network.ClientVerificationData>(global::Grpc.Core.MethodType.Unary, "IGenericService", "VerifyClient", serializerProvider);
                this.GetServerTime = global::MagicOnion.Client.Internal.RawMethodInvoker.Create_ValueType_ValueType<global::MessagePack.Nil, global::System.DateTime>(global::Grpc.Core.MethodType.Unary, "IGenericService", "GetServerTime", serializerProvider);
                this.GetDefinitions = global::MagicOnion.Client.Internal.RawMethodInvoker.Create_ValueType_RefType<global::MessagePack.Nil, global::System.Byte[]>(global::Grpc.Core.MethodType.Unary, "IGenericService", "GetDefinitions", serializerProvider);
                this.GetGenericConfig = global::MagicOnion.Client.Internal.RawMethodInvoker.Create_ValueType_ValueType<global::MessagePack.Nil, global::Shared.Network.EnvironmentGenericConfig>(global::Grpc.Core.MethodType.Unary, "IGenericService", "GetGenericConfig", serializerProvider);
            }
        }
        
        readonly ClientCore core;
        
        public GenericServiceClient(global::MagicOnion.Client.MagicOnionClientOptions options, global::MagicOnion.Serialization.IMagicOnionSerializerProvider serializerProvider) : base(options)
        {
            this.core = new ClientCore(serializerProvider);
        }
        
        private GenericServiceClient(MagicOnionClientOptions options, ClientCore core) : base(options)
        {
            this.core = core;
        }
        
        protected override global::MagicOnion.Client.MagicOnionClientBase<IGenericService> Clone(global::MagicOnion.Client.MagicOnionClientOptions options)
            => new GenericServiceClient(options, core);
        
        public global::MagicOnion.UnaryResult<global::Shared.Network.ClientVerificationData> VerifyClient(global::System.String clientVersion)
            => this.core.VerifyClient.InvokeUnary(this, "IGenericService/VerifyClient", clientVersion);
        public global::MagicOnion.UnaryResult<global::System.DateTime> GetServerTime()
            => this.core.GetServerTime.InvokeUnary(this, "IGenericService/GetServerTime", global::MessagePack.Nil.Default);
        public global::MagicOnion.UnaryResult<global::System.Byte[]> GetDefinitions()
            => this.core.GetDefinitions.InvokeUnary(this, "IGenericService/GetDefinitions", global::MessagePack.Nil.Default);
        public global::MagicOnion.UnaryResult<global::Shared.Network.EnvironmentGenericConfig> GetGenericConfig()
            => this.core.GetGenericConfig.InvokeUnary(this, "IGenericService/GetGenericConfig", global::MessagePack.Nil.Default);
    }
}

namespace Shared.Network
{
    using global::System;
    using global::Grpc.Core;
    using global::MagicOnion;
    using global::MagicOnion.Client;
    using global::MessagePack;
    
    [global::MagicOnion.Ignore]
    public class RpcAuthServiceClient : global::MagicOnion.Client.MagicOnionClientBase<global::Shared.Network.IRpcAuthService>, global::Shared.Network.IRpcAuthService
    {
        class ClientCore
        {
            public global::MagicOnion.Client.Internal.RawMethodInvoker<global::Shared.Network.LoginRequest, global::Shared.Network.AuthenticationData> Login;
            public global::MagicOnion.Client.Internal.RawMethodInvoker<global::Shared.Network.RegisterRequest, global::Shared.Network.AuthenticationData> Register;
            public global::MagicOnion.Client.Internal.RawMethodInvoker<global::Shared.Network.ExchangeRefreshTokenRequest, global::Shared.Network.AuthenticationData> RefreshToken;
            public ClientCore(global::MagicOnion.Serialization.IMagicOnionSerializerProvider serializerProvider)
            {
                this.Login = global::MagicOnion.Client.Internal.RawMethodInvoker.Create_RefType_RefType<global::Shared.Network.LoginRequest, global::Shared.Network.AuthenticationData>(global::Grpc.Core.MethodType.Unary, "IRpcAuthService", "Login", serializerProvider);
                this.Register = global::MagicOnion.Client.Internal.RawMethodInvoker.Create_RefType_RefType<global::Shared.Network.RegisterRequest, global::Shared.Network.AuthenticationData>(global::Grpc.Core.MethodType.Unary, "IRpcAuthService", "Register", serializerProvider);
                this.RefreshToken = global::MagicOnion.Client.Internal.RawMethodInvoker.Create_RefType_RefType<global::Shared.Network.ExchangeRefreshTokenRequest, global::Shared.Network.AuthenticationData>(global::Grpc.Core.MethodType.Unary, "IRpcAuthService", "RefreshToken", serializerProvider);
            }
        }
        
        readonly ClientCore core;
        
        public RpcAuthServiceClient(global::MagicOnion.Client.MagicOnionClientOptions options, global::MagicOnion.Serialization.IMagicOnionSerializerProvider serializerProvider) : base(options)
        {
            this.core = new ClientCore(serializerProvider);
        }
        
        private RpcAuthServiceClient(MagicOnionClientOptions options, ClientCore core) : base(options)
        {
            this.core = core;
        }
        
        protected override global::MagicOnion.Client.MagicOnionClientBase<IRpcAuthService> Clone(global::MagicOnion.Client.MagicOnionClientOptions options)
            => new RpcAuthServiceClient(options, core);
        
        public global::MagicOnion.UnaryResult<global::Shared.Network.AuthenticationData> Login(global::Shared.Network.LoginRequest request)
            => this.core.Login.InvokeUnary(this, "IRpcAuthService/Login", request);
        public global::MagicOnion.UnaryResult<global::Shared.Network.AuthenticationData> Register(global::Shared.Network.RegisterRequest request)
            => this.core.Register.InvokeUnary(this, "IRpcAuthService/Register", request);
        public global::MagicOnion.UnaryResult<global::Shared.Network.AuthenticationData> RefreshToken(global::Shared.Network.ExchangeRefreshTokenRequest request)
            => this.core.RefreshToken.InvokeUnary(this, "IRpcAuthService/RefreshToken", request);
    }
}

namespace Shared.Network
{
    using global::System;
    using global::Grpc.Core;
    using global::MagicOnion;
    using global::MagicOnion.Client;
    using global::MessagePack;
    
    [global::MagicOnion.Ignore]
    public class RpcUserServiceClient : global::MagicOnion.Client.MagicOnionClientBase<global::Shared.Network.IRpcUserService>, global::Shared.Network.IRpcUserService
    {
        class ClientCore
        {
            public global::MagicOnion.Client.Internal.RawMethodInvoker<global::MessagePack.Nil, global::Shared.Network.UserData> SyncUserData;
            public ClientCore(global::MagicOnion.Serialization.IMagicOnionSerializerProvider serializerProvider)
            {
                this.SyncUserData = global::MagicOnion.Client.Internal.RawMethodInvoker.Create_ValueType_ValueType<global::MessagePack.Nil, global::Shared.Network.UserData>(global::Grpc.Core.MethodType.Unary, "IRpcUserService", "SyncUserData", serializerProvider);
            }
        }
        
        readonly ClientCore core;
        
        public RpcUserServiceClient(global::MagicOnion.Client.MagicOnionClientOptions options, global::MagicOnion.Serialization.IMagicOnionSerializerProvider serializerProvider) : base(options)
        {
            this.core = new ClientCore(serializerProvider);
        }
        
        private RpcUserServiceClient(MagicOnionClientOptions options, ClientCore core) : base(options)
        {
            this.core = core;
        }
        
        protected override global::MagicOnion.Client.MagicOnionClientBase<IRpcUserService> Clone(global::MagicOnion.Client.MagicOnionClientOptions options)
            => new RpcUserServiceClient(options, core);
        
        public global::MagicOnion.UnaryResult<global::Shared.Network.UserData> SyncUserData()
            => this.core.SyncUserData.InvokeUnary(this, "IRpcUserService/SyncUserData", global::MessagePack.Nil.Default);
    }
}


#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

// NOTE: Disable warnings for nullable reference types.
// `#nullable disable` causes compile error on old C# compilers (-7.3)
#pragma warning disable 8603 // Possible null reference return.
#pragma warning disable 8618 // Non-nullable variable must contain a non-null value when exiting constructor. Consider declaring it as nullable.
#pragma warning disable 8625 // Cannot convert null literal to non-nullable reference type.

namespace Shared.Network
{
    using global::System;
    using global::Grpc.Core;
    using global::MagicOnion;
    using global::MagicOnion.Client;
    using global::MessagePack;
    
    [global::MagicOnion.Ignore]
    public class ClassRoomHubClient : global::MagicOnion.Client.StreamingHubClientBase<global::Shared.Network.IClassRoomHub, global::Shared.Network.IClassRoomHubReceiver>, global::Shared.Network.IClassRoomHub
    {
        protected override global::Grpc.Core.Method<global::System.Byte[], global::System.Byte[]> DuplexStreamingAsyncMethod { get; }
        
        public ClassRoomHubClient(global::Grpc.Core.CallInvoker callInvoker, global::System.String host, global::Grpc.Core.CallOptions options, global::MagicOnion.Serialization.IMagicOnionSerializerProvider serializerProvider, global::MagicOnion.Client.IMagicOnionClientLogger logger)
            : base(callInvoker, host, options, serializerProvider, logger)
        {
            var marshaller = global::MagicOnion.MagicOnionMarshallers.ThroughMarshaller;
            DuplexStreamingAsyncMethod = new global::Grpc.Core.Method<global::System.Byte[], global::System.Byte[]>(global::Grpc.Core.MethodType.DuplexStreaming, "IClassRoomHub", "Connect", marshaller, marshaller);
        }
        
        public global::System.Threading.Tasks.Task Sync()
            => base.WriteMessageWithResponseAsync<global::MessagePack.Nil, global::MessagePack.Nil>(-1985537094, global::MessagePack.Nil.Default);
        public global::System.Threading.Tasks.Task<global::Shared.Network.RoomStatusResponse> JoinAsync(global::Shared.Network.JoinClassRoomData data)
            => base.WriteMessageWithResponseAsync<global::Shared.Network.JoinClassRoomData, global::Shared.Network.RoomStatusResponse>(-733403293, data);
        public global::System.Threading.Tasks.Task LeaveAsync()
            => base.WriteMessageWithResponseAsync<global::MessagePack.Nil, global::MessagePack.Nil>(1368362116, global::MessagePack.Nil.Default);
        public global::System.Threading.Tasks.Task InviteToGame(global::Shared.Network.InviteToGameData data)
            => base.WriteMessageWithResponseAsync<global::Shared.Network.InviteToGameData, global::MessagePack.Nil>(-1508369901, data);
        public global::System.Threading.Tasks.Task UpdateAvatar(global::System.String name, global::System.String modelPath, global::System.String avatarPath)
            => base.WriteMessageWithResponseAsync<global::MagicOnion.DynamicArgumentTuple<global::System.String, global::System.String, global::System.String>, global::MessagePack.Nil>(-1223313283, new global::MagicOnion.DynamicArgumentTuple<global::System.String, global::System.String, global::System.String>(name, modelPath, avatarPath));
        public global::System.Threading.Tasks.Task VirtualRoomTickSync(global::Shared.Network.VirtualRoomTickData data)
            => base.WriteMessageWithResponseAsync<global::Shared.Network.VirtualRoomTickData, global::MessagePack.Nil>(752406261, data);
        public global::System.Threading.Tasks.Task SharingTickSync(global::Shared.Network.SharingTickData data)
            => base.WriteMessageWithResponseAsync<global::Shared.Network.SharingTickData, global::MessagePack.Nil>(1826948449, data);
        public global::System.Threading.Tasks.Task Tick(global::System.String message)
            => base.WriteMessageWithResponseAsync<global::System.String, global::MessagePack.Nil>(-570628668, message);
        public global::System.Threading.Tasks.Task CmdToKeepAliveConnection()
            => base.WriteMessageWithResponseAsync<global::MessagePack.Nil, global::MessagePack.Nil>(-2099297364, global::MessagePack.Nil.Default);
        
        public global::Shared.Network.IClassRoomHub FireAndForget()
            => new FireAndForgetClient(this);
        
        [global::MagicOnion.Ignore]
        class FireAndForgetClient : global::Shared.Network.IClassRoomHub
        {
            readonly ClassRoomHubClient parent;
        
            public FireAndForgetClient(ClassRoomHubClient parent)
                => this.parent = parent;
        
            public global::Shared.Network.IClassRoomHub FireAndForget() => this;
            public global::System.Threading.Tasks.Task DisposeAsync() => throw new global::System.NotSupportedException();
            public global::System.Threading.Tasks.Task WaitForDisconnect() => throw new global::System.NotSupportedException();
        
            public global::System.Threading.Tasks.Task Sync()
                => parent.WriteMessageFireAndForgetAsync<global::MessagePack.Nil, global::MessagePack.Nil>(-1985537094, global::MessagePack.Nil.Default);
            public global::System.Threading.Tasks.Task<global::Shared.Network.RoomStatusResponse> JoinAsync(global::Shared.Network.JoinClassRoomData data)
                => parent.WriteMessageFireAndForgetAsync<global::Shared.Network.JoinClassRoomData, global::Shared.Network.RoomStatusResponse>(-733403293, data);
            public global::System.Threading.Tasks.Task LeaveAsync()
                => parent.WriteMessageFireAndForgetAsync<global::MessagePack.Nil, global::MessagePack.Nil>(1368362116, global::MessagePack.Nil.Default);
            public global::System.Threading.Tasks.Task InviteToGame(global::Shared.Network.InviteToGameData data)
                => parent.WriteMessageFireAndForgetAsync<global::Shared.Network.InviteToGameData, global::MessagePack.Nil>(-1508369901, data);
            public global::System.Threading.Tasks.Task UpdateAvatar(global::System.String name, global::System.String modelPath, global::System.String avatarPath)
                => parent.WriteMessageFireAndForgetAsync<global::MagicOnion.DynamicArgumentTuple<global::System.String, global::System.String, global::System.String>, global::MessagePack.Nil>(-1223313283, new global::MagicOnion.DynamicArgumentTuple<global::System.String, global::System.String, global::System.String>(name, modelPath, avatarPath));
            public global::System.Threading.Tasks.Task VirtualRoomTickSync(global::Shared.Network.VirtualRoomTickData data)
                => parent.WriteMessageFireAndForgetAsync<global::Shared.Network.VirtualRoomTickData, global::MessagePack.Nil>(752406261, data);
            public global::System.Threading.Tasks.Task SharingTickSync(global::Shared.Network.SharingTickData data)
                => parent.WriteMessageFireAndForgetAsync<global::Shared.Network.SharingTickData, global::MessagePack.Nil>(1826948449, data);
            public global::System.Threading.Tasks.Task Tick(global::System.String message)
                => parent.WriteMessageFireAndForgetAsync<global::System.String, global::MessagePack.Nil>(-570628668, message);
            public global::System.Threading.Tasks.Task CmdToKeepAliveConnection()
                => parent.WriteMessageFireAndForgetAsync<global::MessagePack.Nil, global::MessagePack.Nil>(-2099297364, global::MessagePack.Nil.Default);
            
        }
        
        protected override void OnBroadcastEvent(global::System.Int32 methodId, global::System.ArraySegment<global::System.Byte> data)
        {
            switch (methodId)
            {
                case -1297457280: // Void OnJoin(global::Shared.Network.RoomStatusResponse status, global::Shared.Network.PublicUserData user)
                    {
                        var value = base.Deserialize<global::MagicOnion.DynamicArgumentTuple<global::Shared.Network.RoomStatusResponse, global::Shared.Network.PublicUserData>>(data);
                        receiver.OnJoin(value.Item1, value.Item2);
                    }
                    break;
                case 532410095: // Void OnLeave(global::Shared.Network.RoomStatusResponse status, global::Shared.Network.PublicUserData user)
                    {
                        var value = base.Deserialize<global::MagicOnion.DynamicArgumentTuple<global::Shared.Network.RoomStatusResponse, global::Shared.Network.PublicUserData>>(data);
                        receiver.OnLeave(value.Item1, value.Item2);
                    }
                    break;
                case -39167974: // Void OnInviteToGame(global::Shared.Network.InviteToGameData data, global::Shared.Network.PublicUserData inviter)
                    {
                        var value = base.Deserialize<global::MagicOnion.DynamicArgumentTuple<global::Shared.Network.InviteToGameData, global::Shared.Network.PublicUserData>>(data);
                        receiver.OnInviteToGame(value.Item1, value.Item2);
                    }
                    break;
                case 1164468800: // Void OnUpdateAvatar(global::Shared.Network.PublicUserData user)
                    {
                        var value = base.Deserialize<global::Shared.Network.PublicUserData>(data);
                        receiver.OnUpdateAvatar(value);
                    }
                    break;
                case -1312988598: // Void OnRoomTick(global::Shared.Network.VirtualRoomTickResponse response)
                    {
                        var value = base.Deserialize<global::Shared.Network.VirtualRoomTickResponse>(data);
                        receiver.OnRoomTick(value);
                    }
                    break;
                case -1498437807: // Void OnSharingTick(global::Shared.Network.SharingTickData response)
                    {
                        var value = base.Deserialize<global::Shared.Network.SharingTickData>(data);
                        receiver.OnSharingTick(value);
                    }
                    break;
                case -1598688755: // Void OnTick(global::System.String message)
                    {
                        var value = base.Deserialize<global::System.String>(data);
                        receiver.OnTick(value);
                    }
                    break;
            }
        }
        
        protected override void OnResponseEvent(global::System.Int32 methodId, global::System.Object taskCompletionSource, global::System.ArraySegment<global::System.Byte> data)
        {
            switch (methodId)
            {
                case -1985537094: // Task Sync()
                    base.SetResultForResponse<global::MessagePack.Nil>(taskCompletionSource, data);
                    break;
                case -733403293: // Task<RoomStatusResponse> JoinAsync(global::Shared.Network.JoinClassRoomData data)
                    base.SetResultForResponse<global::Shared.Network.RoomStatusResponse>(taskCompletionSource, data);
                    break;
                case 1368362116: // Task LeaveAsync()
                    base.SetResultForResponse<global::MessagePack.Nil>(taskCompletionSource, data);
                    break;
                case -1508369901: // Task InviteToGame(global::Shared.Network.InviteToGameData data)
                    base.SetResultForResponse<global::MessagePack.Nil>(taskCompletionSource, data);
                    break;
                case -1223313283: // Task UpdateAvatar(global::System.String name, global::System.String modelPath, global::System.String avatarPath)
                    base.SetResultForResponse<global::MessagePack.Nil>(taskCompletionSource, data);
                    break;
                case 752406261: // Task VirtualRoomTickSync(global::Shared.Network.VirtualRoomTickData data)
                    base.SetResultForResponse<global::MessagePack.Nil>(taskCompletionSource, data);
                    break;
                case 1826948449: // Task SharingTickSync(global::Shared.Network.SharingTickData data)
                    base.SetResultForResponse<global::MessagePack.Nil>(taskCompletionSource, data);
                    break;
                case -570628668: // Task Tick(global::System.String message)
                    base.SetResultForResponse<global::MessagePack.Nil>(taskCompletionSource, data);
                    break;
                case -2099297364: // Task CmdToKeepAliveConnection()
                    base.SetResultForResponse<global::MessagePack.Nil>(taskCompletionSource, data);
                    break;
            }
        }
        
    }
}

namespace Shared.Network
{
    using global::System;
    using global::Grpc.Core;
    using global::MagicOnion;
    using global::MagicOnion.Client;
    using global::MessagePack;
    
    [global::MagicOnion.Ignore]
    public class QuizzesHubClient : global::MagicOnion.Client.StreamingHubClientBase<global::Shared.Network.IQuizzesHub, global::Shared.Network.IQuizzesHubReceiver>, global::Shared.Network.IQuizzesHub
    {
        protected override global::Grpc.Core.Method<global::System.Byte[], global::System.Byte[]> DuplexStreamingAsyncMethod { get; }
        
        public QuizzesHubClient(global::Grpc.Core.CallInvoker callInvoker, global::System.String host, global::Grpc.Core.CallOptions options, global::MagicOnion.Serialization.IMagicOnionSerializerProvider serializerProvider, global::MagicOnion.Client.IMagicOnionClientLogger logger)
            : base(callInvoker, host, options, serializerProvider, logger)
        {
            var marshaller = global::MagicOnion.MagicOnionMarshallers.ThroughMarshaller;
            DuplexStreamingAsyncMethod = new global::Grpc.Core.Method<global::System.Byte[], global::System.Byte[]>(global::Grpc.Core.MethodType.DuplexStreaming, "IQuizzesHub", "Connect", marshaller, marshaller);
        }
        
        public global::System.Threading.Tasks.Task<global::Shared.Network.QuizzesStatusResponse> JoinAsync(global::Shared.Network.JoinQuizzesData data)
            => base.WriteMessageWithResponseAsync<global::Shared.Network.JoinQuizzesData, global::Shared.Network.QuizzesStatusResponse>(-733403293, data);
        public global::System.Threading.Tasks.Task LeaveAsync()
            => base.WriteMessageWithResponseAsync<global::MessagePack.Nil, global::MessagePack.Nil>(1368362116, global::MessagePack.Nil.Default);
        public global::System.Threading.Tasks.Task<global::Shared.Network.QuizCollectionListDto> GetCollections()
            => base.WriteMessageWithResponseAsync<global::MessagePack.Nil, global::Shared.Network.QuizCollectionListDto>(-1239904212, global::MessagePack.Nil.Default);
        public global::System.Threading.Tasks.Task StartGame(global::Shared.Network.QuizCollectionDto data)
            => base.WriteMessageWithResponseAsync<global::Shared.Network.QuizCollectionDto, global::MessagePack.Nil>(-1425037643, data);
        public global::System.Threading.Tasks.Task DonePreview()
            => base.WriteMessageWithResponseAsync<global::MessagePack.Nil, global::MessagePack.Nil>(-1479033269, global::MessagePack.Nil.Default);
        public global::System.Threading.Tasks.Task EndQuestion()
            => base.WriteMessageWithResponseAsync<global::MessagePack.Nil, global::MessagePack.Nil>(-1701585166, global::MessagePack.Nil.Default);
        public global::System.Threading.Tasks.Task NextQuestion()
            => base.WriteMessageWithResponseAsync<global::MessagePack.Nil, global::MessagePack.Nil>(976212, global::MessagePack.Nil.Default);
        public global::System.Threading.Tasks.Task EndSession()
            => base.WriteMessageWithResponseAsync<global::MessagePack.Nil, global::MessagePack.Nil>(1933187950, global::MessagePack.Nil.Default);
        public global::System.Threading.Tasks.Task Answer(global::Shared.Network.AnswerData data)
            => base.WriteMessageWithResponseAsync<global::Shared.Network.AnswerData, global::MessagePack.Nil>(-112287489, data);
        public global::System.Threading.Tasks.Task CmdToKeepAliveConnection()
            => base.WriteMessageWithResponseAsync<global::MessagePack.Nil, global::MessagePack.Nil>(-2099297364, global::MessagePack.Nil.Default);
        
        public global::Shared.Network.IQuizzesHub FireAndForget()
            => new FireAndForgetClient(this);
        
        [global::MagicOnion.Ignore]
        class FireAndForgetClient : global::Shared.Network.IQuizzesHub
        {
            readonly QuizzesHubClient parent;
        
            public FireAndForgetClient(QuizzesHubClient parent)
                => this.parent = parent;
        
            public global::Shared.Network.IQuizzesHub FireAndForget() => this;
            public global::System.Threading.Tasks.Task DisposeAsync() => throw new global::System.NotSupportedException();
            public global::System.Threading.Tasks.Task WaitForDisconnect() => throw new global::System.NotSupportedException();
        
            public global::System.Threading.Tasks.Task<global::Shared.Network.QuizzesStatusResponse> JoinAsync(global::Shared.Network.JoinQuizzesData data)
                => parent.WriteMessageFireAndForgetAsync<global::Shared.Network.JoinQuizzesData, global::Shared.Network.QuizzesStatusResponse>(-733403293, data);
            public global::System.Threading.Tasks.Task LeaveAsync()
                => parent.WriteMessageFireAndForgetAsync<global::MessagePack.Nil, global::MessagePack.Nil>(1368362116, global::MessagePack.Nil.Default);
            public global::System.Threading.Tasks.Task<global::Shared.Network.QuizCollectionListDto> GetCollections()
                => parent.WriteMessageFireAndForgetAsync<global::MessagePack.Nil, global::Shared.Network.QuizCollectionListDto>(-1239904212, global::MessagePack.Nil.Default);
            public global::System.Threading.Tasks.Task StartGame(global::Shared.Network.QuizCollectionDto data)
                => parent.WriteMessageFireAndForgetAsync<global::Shared.Network.QuizCollectionDto, global::MessagePack.Nil>(-1425037643, data);
            public global::System.Threading.Tasks.Task DonePreview()
                => parent.WriteMessageFireAndForgetAsync<global::MessagePack.Nil, global::MessagePack.Nil>(-1479033269, global::MessagePack.Nil.Default);
            public global::System.Threading.Tasks.Task EndQuestion()
                => parent.WriteMessageFireAndForgetAsync<global::MessagePack.Nil, global::MessagePack.Nil>(-1701585166, global::MessagePack.Nil.Default);
            public global::System.Threading.Tasks.Task NextQuestion()
                => parent.WriteMessageFireAndForgetAsync<global::MessagePack.Nil, global::MessagePack.Nil>(976212, global::MessagePack.Nil.Default);
            public global::System.Threading.Tasks.Task EndSession()
                => parent.WriteMessageFireAndForgetAsync<global::MessagePack.Nil, global::MessagePack.Nil>(1933187950, global::MessagePack.Nil.Default);
            public global::System.Threading.Tasks.Task Answer(global::Shared.Network.AnswerData data)
                => parent.WriteMessageFireAndForgetAsync<global::Shared.Network.AnswerData, global::MessagePack.Nil>(-112287489, data);
            public global::System.Threading.Tasks.Task CmdToKeepAliveConnection()
                => parent.WriteMessageFireAndForgetAsync<global::MessagePack.Nil, global::MessagePack.Nil>(-2099297364, global::MessagePack.Nil.Default);
            
        }
        
        protected override void OnBroadcastEvent(global::System.Int32 methodId, global::System.ArraySegment<global::System.Byte> data)
        {
            switch (methodId)
            {
                case -1297457280: // Void OnJoin(global::Shared.Network.QuizzesStatusResponse status, global::Shared.Network.QuizzesUserData user)
                    {
                        var value = base.Deserialize<global::MagicOnion.DynamicArgumentTuple<global::Shared.Network.QuizzesStatusResponse, global::Shared.Network.QuizzesUserData>>(data);
                        receiver.OnJoin(value.Item1, value.Item2);
                    }
                    break;
                case 532410095: // Void OnLeave(global::Shared.Network.QuizzesStatusResponse status, global::Shared.Network.QuizzesUserData user)
                    {
                        var value = base.Deserialize<global::MagicOnion.DynamicArgumentTuple<global::Shared.Network.QuizzesStatusResponse, global::Shared.Network.QuizzesUserData>>(data);
                        receiver.OnLeave(value.Item1, value.Item2);
                    }
                    break;
                case 36572012: // Void OnStart(global::Shared.Network.QuizzesStatusResponse status)
                    {
                        var value = base.Deserialize<global::Shared.Network.QuizzesStatusResponse>(data);
                        receiver.OnStart(value);
                    }
                    break;
                case 42925156: // Void OnDonePreview()
                    {
                        var value = base.Deserialize<global::MessagePack.Nil>(data);
                        receiver.OnDonePreview();
                    }
                    break;
                case -442249483: // Void OnEndQuestion(global::Shared.Network.QuizzesStatusResponse status)
                    {
                        var value = base.Deserialize<global::Shared.Network.QuizzesStatusResponse>(data);
                        receiver.OnEndQuestion(value);
                    }
                    break;
                case -1830126295: // Void OnNextQuestion(global::Shared.Network.QuizzesStatusResponse status)
                    {
                        var value = base.Deserialize<global::Shared.Network.QuizzesStatusResponse>(data);
                        receiver.OnNextQuestion(value);
                    }
                    break;
                case -2117137532: // Void OnEndQuiz(global::Shared.Network.QuizzesStatusResponse status)
                    {
                        var value = base.Deserialize<global::Shared.Network.QuizzesStatusResponse>(data);
                        receiver.OnEndQuiz(value);
                    }
                    break;
                case -2136871641: // Void OnEndSession()
                    {
                        var value = base.Deserialize<global::MessagePack.Nil>(data);
                        receiver.OnEndSession();
                    }
                    break;
                case 1062809434: // Void OnAnswer(global::Shared.Network.AnswerData data)
                    {
                        var value = base.Deserialize<global::Shared.Network.AnswerData>(data);
                        receiver.OnAnswer(value);
                    }
                    break;
            }
        }
        
        protected override void OnResponseEvent(global::System.Int32 methodId, global::System.Object taskCompletionSource, global::System.ArraySegment<global::System.Byte> data)
        {
            switch (methodId)
            {
                case -733403293: // Task<QuizzesStatusResponse> JoinAsync(global::Shared.Network.JoinQuizzesData data)
                    base.SetResultForResponse<global::Shared.Network.QuizzesStatusResponse>(taskCompletionSource, data);
                    break;
                case 1368362116: // Task LeaveAsync()
                    base.SetResultForResponse<global::MessagePack.Nil>(taskCompletionSource, data);
                    break;
                case -1239904212: // Task<QuizCollectionListDto> GetCollections()
                    base.SetResultForResponse<global::Shared.Network.QuizCollectionListDto>(taskCompletionSource, data);
                    break;
                case -1425037643: // Task StartGame(global::Shared.Network.QuizCollectionDto data)
                    base.SetResultForResponse<global::MessagePack.Nil>(taskCompletionSource, data);
                    break;
                case -1479033269: // Task DonePreview()
                    base.SetResultForResponse<global::MessagePack.Nil>(taskCompletionSource, data);
                    break;
                case -1701585166: // Task EndQuestion()
                    base.SetResultForResponse<global::MessagePack.Nil>(taskCompletionSource, data);
                    break;
                case 976212: // Task NextQuestion()
                    base.SetResultForResponse<global::MessagePack.Nil>(taskCompletionSource, data);
                    break;
                case 1933187950: // Task EndSession()
                    base.SetResultForResponse<global::MessagePack.Nil>(taskCompletionSource, data);
                    break;
                case -112287489: // Task Answer(global::Shared.Network.AnswerData data)
                    base.SetResultForResponse<global::MessagePack.Nil>(taskCompletionSource, data);
                    break;
                case -2099297364: // Task CmdToKeepAliveConnection()
                    base.SetResultForResponse<global::MessagePack.Nil>(taskCompletionSource, data);
                    break;
            }
        }
        
    }
}

namespace Shared.Network
{
    using global::System;
    using global::Grpc.Core;
    using global::MagicOnion;
    using global::MagicOnion.Client;
    using global::MessagePack;
    
    [global::MagicOnion.Ignore]
    public class TimerHubClient : global::MagicOnion.Client.StreamingHubClientBase<global::Shared.Network.ITimerHub, global::Shared.Network.ITimerHubReceiver>, global::Shared.Network.ITimerHub
    {
        protected override global::Grpc.Core.Method<global::System.Byte[], global::System.Byte[]> DuplexStreamingAsyncMethod { get; }
        
        public TimerHubClient(global::Grpc.Core.CallInvoker callInvoker, global::System.String host, global::Grpc.Core.CallOptions options, global::MagicOnion.Serialization.IMagicOnionSerializerProvider serializerProvider, global::MagicOnion.Client.IMagicOnionClientLogger logger)
            : base(callInvoker, host, options, serializerProvider, logger)
        {
            var marshaller = global::MagicOnion.MagicOnionMarshallers.ThroughMarshaller;
            DuplexStreamingAsyncMethod = new global::Grpc.Core.Method<global::System.Byte[], global::System.Byte[]>(global::Grpc.Core.MethodType.DuplexStreaming, "ITimerHub", "Connect", marshaller, marshaller);
        }
        
        public global::System.Threading.Tasks.Task<global::System.Int32> SumAsync(global::System.Int32 x, global::System.Int32 y)
            => base.WriteMessageWithResponseAsync<global::MagicOnion.DynamicArgumentTuple<global::System.Int32, global::System.Int32>, global::System.Int32>(-86482820, new global::MagicOnion.DynamicArgumentTuple<global::System.Int32, global::System.Int32>(x, y));
        public global::System.Threading.Tasks.Task SetAsync(global::System.TimeSpan interval)
            => base.WriteMessageWithResponseAsync<global::System.TimeSpan, global::MessagePack.Nil>(-502367419, interval);
        
        public global::Shared.Network.ITimerHub FireAndForget()
            => new FireAndForgetClient(this);
        
        [global::MagicOnion.Ignore]
        class FireAndForgetClient : global::Shared.Network.ITimerHub
        {
            readonly TimerHubClient parent;
        
            public FireAndForgetClient(TimerHubClient parent)
                => this.parent = parent;
        
            public global::Shared.Network.ITimerHub FireAndForget() => this;
            public global::System.Threading.Tasks.Task DisposeAsync() => throw new global::System.NotSupportedException();
            public global::System.Threading.Tasks.Task WaitForDisconnect() => throw new global::System.NotSupportedException();
        
            public global::System.Threading.Tasks.Task<global::System.Int32> SumAsync(global::System.Int32 x, global::System.Int32 y)
                => parent.WriteMessageFireAndForgetAsync<global::MagicOnion.DynamicArgumentTuple<global::System.Int32, global::System.Int32>, global::System.Int32>(-86482820, new global::MagicOnion.DynamicArgumentTuple<global::System.Int32, global::System.Int32>(x, y));
            public global::System.Threading.Tasks.Task SetAsync(global::System.TimeSpan interval)
                => parent.WriteMessageFireAndForgetAsync<global::System.TimeSpan, global::MessagePack.Nil>(-502367419, interval);
            
        }
        
        protected override void OnBroadcastEvent(global::System.Int32 methodId, global::System.ArraySegment<global::System.Byte> data)
        {
            switch (methodId)
            {
                case -1598688755: // Void OnTick(global::System.String message)
                    {
                        var value = base.Deserialize<global::System.String>(data);
                        receiver.OnTick(value);
                    }
                    break;
            }
        }
        
        protected override void OnResponseEvent(global::System.Int32 methodId, global::System.Object taskCompletionSource, global::System.ArraySegment<global::System.Byte> data)
        {
            switch (methodId)
            {
                case -86482820: // Task<Int32> SumAsync(global::System.Int32 x, global::System.Int32 y)
                    base.SetResultForResponse<global::System.Int32>(taskCompletionSource, data);
                    break;
                case -502367419: // Task SetAsync(global::System.TimeSpan interval)
                    base.SetResultForResponse<global::MessagePack.Nil>(taskCompletionSource, data);
                    break;
            }
        }
        
    }
}


